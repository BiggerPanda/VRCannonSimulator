//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/TestInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInput"",
    ""maps"": [
        {
            ""name"": ""rotateCannon"",
            ""id"": ""2a391165-2d1e-4c34-9fa6-d3ece24755c4"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""1ac0705d-c7ce-4bd0-876e-51d03887bb5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Top"",
                    ""type"": ""Button"",
                    ""id"": ""45db457f-8e6d-4c5c-ae42-2657c3937ba9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""cde56e18-e85e-4d88-a2b0-8b674ac0b4cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""1f63ca65-5e7f-493d-9b3c-f459ab8f564c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreciseMode"",
                    ""type"": ""Button"",
                    ""id"": ""a253a0ad-449f-4d55-b10c-959be20ceb6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54aea955-bcfe-499f-af9a-07b85ab02d25"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3f97fef-fb83-4d8f-83e5-392728908fd4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Top"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ff83fe5-51a2-4563-808f-516a5babf24e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c49ab0a-098e-49bb-8a47-802ed18152ae"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04c56d2e-ceb5-4e29-b611-a20ac05671db"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreciseMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // rotateCannon
        m_rotateCannon = asset.FindActionMap("rotateCannon", throwIfNotFound: true);
        m_rotateCannon_Left = m_rotateCannon.FindAction("Left", throwIfNotFound: true);
        m_rotateCannon_Top = m_rotateCannon.FindAction("Top", throwIfNotFound: true);
        m_rotateCannon_Right = m_rotateCannon.FindAction("Right", throwIfNotFound: true);
        m_rotateCannon_Down = m_rotateCannon.FindAction("Down", throwIfNotFound: true);
        m_rotateCannon_PreciseMode = m_rotateCannon.FindAction("PreciseMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // rotateCannon
    private readonly InputActionMap m_rotateCannon;
    private List<IRotateCannonActions> m_RotateCannonActionsCallbackInterfaces = new List<IRotateCannonActions>();
    private readonly InputAction m_rotateCannon_Left;
    private readonly InputAction m_rotateCannon_Top;
    private readonly InputAction m_rotateCannon_Right;
    private readonly InputAction m_rotateCannon_Down;
    private readonly InputAction m_rotateCannon_PreciseMode;
    public struct RotateCannonActions
    {
        private @TestInput m_Wrapper;
        public RotateCannonActions(@TestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_rotateCannon_Left;
        public InputAction @Top => m_Wrapper.m_rotateCannon_Top;
        public InputAction @Right => m_Wrapper.m_rotateCannon_Right;
        public InputAction @Down => m_Wrapper.m_rotateCannon_Down;
        public InputAction @PreciseMode => m_Wrapper.m_rotateCannon_PreciseMode;
        public InputActionMap Get() { return m_Wrapper.m_rotateCannon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateCannonActions set) { return set.Get(); }
        public void AddCallbacks(IRotateCannonActions instance)
        {
            if (instance == null || m_Wrapper.m_RotateCannonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotateCannonActionsCallbackInterfaces.Add(instance);
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Top.started += instance.OnTop;
            @Top.performed += instance.OnTop;
            @Top.canceled += instance.OnTop;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @PreciseMode.started += instance.OnPreciseMode;
            @PreciseMode.performed += instance.OnPreciseMode;
            @PreciseMode.canceled += instance.OnPreciseMode;
        }

        private void UnregisterCallbacks(IRotateCannonActions instance)
        {
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Top.started -= instance.OnTop;
            @Top.performed -= instance.OnTop;
            @Top.canceled -= instance.OnTop;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @PreciseMode.started -= instance.OnPreciseMode;
            @PreciseMode.performed -= instance.OnPreciseMode;
            @PreciseMode.canceled -= instance.OnPreciseMode;
        }

        public void RemoveCallbacks(IRotateCannonActions instance)
        {
            if (m_Wrapper.m_RotateCannonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotateCannonActions instance)
        {
            foreach (var item in m_Wrapper.m_RotateCannonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotateCannonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotateCannonActions @rotateCannon => new RotateCannonActions(this);
    public interface IRotateCannonActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnTop(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnPreciseMode(InputAction.CallbackContext context);
    }
}
